import mongoose from "mongoose";

const transactionSchema = new mongoose.Schema(
  {
    userId: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "User",
      required: true,
      index: true, // Index for faster queries
    },
    
    // Basic Transaction Info
    type: {
      type: String,
      enum: ["income", "expense", "transfer"],
      required: true,
      index: true,
    },
    category: {
      type: String,
      required: true,
      index: true,
    },
    subcategory: {
      type: String, // More granular categorization
    },
    amount: {
      type: Number,
      required: true,
      min: [0.01, "Amount must be greater than 0"],
    },
    currency: {
      type: String,
      default: "INR",
    },
    exchangeRate: {
      type: Number,
      default: 1, // For multi-currency support
    },
    
    // Enhanced Date & Time
    date: {
      type: Date,
      default: Date.now,
      required: true,
      index: true,
    },
    
    // Transaction Details
    description: {
      type: String,
      trim: true,
    },
    notes: {
      type: String, // Additional user notes
    },
    
    // Location & Context
    location: {
      name: String, // "Starbucks, Downtown"
      coordinates: {
        lat: Number,
        lng: Number,
      },
      address: String,
    },
    
    // Payment Method
    paymentMethod: {
      type: String,
      enum: ["cash", "credit_card", "debit_card", "upi", "net_banking", "wallet", "check", "other"],
      default: "cash",
    },
    accountId: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "Account", // Reference to bank account/wallet
    },
    
    // Transaction Status & Metadata
    status: {
      type: String,
      enum: ["completed", "pending", "cancelled", "failed"],
      default: "completed",
    },
    isRecurring: {
      type: Boolean,
      default: false,
    },
    recurringId: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "RecurringTransaction",
    },
    
    // Attachments & Receipts
    attachments: [{
      fileName: String,
      fileUrl: String,
      fileType: String,
      uploadDate: { type: Date, default: Date.now },
    }],
    
    // Tags for better organization
    tags: [String],
    
    // Split Transaction Support
    isSplit: {
      type: Boolean,
      default: false,
    },
    splitWith: [{
      userId: {
        type: mongoose.Schema.Types.ObjectId,
        ref: "User",
      },
      amount: Number,
      settled: { type: Boolean, default: false },
    }],
    
    // Business/Tax Related
    isTaxDeductible: {
      type: Boolean,
      default: false,
    },
    taxCategory: String,
    businessExpense: {
      type: Boolean,
      default: false,
    },
    projectId: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "Project", // For business expense tracking
    },
    
    // Analytics & AI
    isAnomaly: {
      type: Boolean,
      default: false, // Flagged by AI for unusual spending
    },
    confidence: {
      type: Number,
      min: 0,
      max: 1, // AI confidence in categorization
    },
    autoGenerated: {
      type: Boolean,
      default: false, // Generated from bank sync
    },
    
    // Soft delete
    isDeleted: {
      type: Boolean,
      default: false,
    },
    deletedAt: Date,
  },
  { 
    timestamps: true,
    // Compound indexes for better query performance
    indexes: [
      { userId: 1, date: -1 },
      { userId: 1, type: 1, date: -1 },
      { userId: 1, category: 1, date: -1 },
      { userId: 1, isDeleted: 1, date: -1 }
    ]
  }
);

// Virtual for converted amount (in user's preferred currency)
transactionSchema.virtual('convertedAmount').get(function() {
  return this.amount * (this.exchangeRate || 1);
});

// Pre-save middleware for analytics
transactionSchema.pre('save', function(next) {
  // Add logic for anomaly detection, auto-categorization, etc.
  next();
});

// Static methods for analytics
transactionSchema.statics.getMonthlySpending = function(userId, year, month) {
  return this.aggregate([
    {
      $match: {
        userId: mongoose.Types.ObjectId(userId),
        type: 'expense',
        isDeleted: false,
        date: {
          $gte: new Date(year, month - 1, 1),
          $lt: new Date(year, month, 1)
        }
      }
    },
    {
      $group: {
        _id: '$category',
        total: { $sum: '$amount' },
        count: { $sum: 1 }
      }
    }
  ]);
};

export const Transaction = mongoose.model("Transaction", transactionSchema);